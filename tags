!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
ARGV_OSLEN	./src/argv.c	45;"	d	file:
BINARY	./src/argv.c	/^char *BINARY;$/;"	v
CASE	./src/core/token.c	99;"	d	file:
CHECK	./src/core/token.c	40;"	d	file:
LIST_GARBAGE	./src/core/garbage.c	/^List *LIST_GARBAGE = NULL;$/;"	v
TOKEN_ID_COUNTER	./src/core/token.c	/^long TOKEN_ID_COUNTER = 0;$/;"	v
_ADD_SEMICOLON_INDEX	./src/core/scanner.c	42;"	d	file:
_CHECK	./src/core/interpret.c	52;"	d	file:
_CODESTR_INDEX	./src/core/scanner.c	/^int _CODESTR_INDEX = 0;$/;"	v
_FUNCTIONS_ERROR	./src/core/functions.c	46;"	d	file:
_GARBAGE_ERROR	./src/core/garbage.c	38;"	d	file:
_Garbage	./src/core/garbage.c	/^} _Garbage;$/;"	t	typeref:struct:__anon1	file:
_HAS_NEXT	./src/core/interpret.c	53;"	d	file:
_INTERPRET_ERROR	./src/core/interpret.c	43;"	d	file:
_NEXT	./src/core/interpret.c	55;"	d	file:
_NEXT2	./src/core/interpret.c	56;"	d	file:
_NEXT_ORG	./src/core/interpret.c	54;"	d	file:
_NEXT_TT	./src/core/interpret.c	57;"	d	file:
_SKIP	./src/core/interpret.c	58;"	d	file:
_TOKENENDS	./src/core/scanner.c	/^const char _TOKENENDS[] = "}])+-*\/={([<>;:,.!";$/;"	v
_add_semicolon_to_list	./src/core/scanner.c	/^_add_semicolon_to_list(Scanner *p_scanner) {$/;"	f
_block	./src/core/interpret.c	/^_block(Interpret *p_interpret) {$/;"	f
_block_get	./src/core/interpret.c	/^_block_get(Interpret *p_interpret, List *p_list_block) {$/;"	f
_block_skip	./src/core/interpret.c	/^_block_skip(Interpret *p_interpret) {$/;"	f
_compare	./src/core/interpret.c	/^_compare(Interpret *p_interpret) {$/;"	f
_control	./src/core/interpret.c	/^_control(Interpret *p_interpret) {$/;"	f
_expression	./src/core/interpret.c	/^_expression(Interpret *p_interpret) {$/;"	f
_expression_	./src/core/interpret.c	/^_expression_(Interpret *p_interpret) {$/;"	f
_expression_get	./src/core/interpret.c	/^_expression_get(Interpret *p_interpret, List *p_list_expression) {$/;"	f
_func_decl	./src/core/interpret.c	/^_func_decl(Interpret *p_interpret) {$/;"	f
_indent	./src/data/tree.c	/^void _indent(int i_indent) {$/;"	f
_list_copy_cb	./src/data/list.c	/^_list_copy_cb(void *p_void1, void *p_cpy) {$/;"	f
_next	./src/core/interpret.c	/^_next(Interpret *p_interpret) {$/;"	f
_next_tt	./src/core/interpret.c	/^_next_tt(Interpret *p_interpret) {$/;"	f
_print_lookahead	./src/core/interpret.c	/^_print_lookahead(Interpret *p_interpret) {$/;"	f
_proc_decl	./src/core/interpret.c	/^_proc_decl(Interpret *p_interpret) {$/;"	f
_process	./src/core/functions.c	/^_process(Interpret *p_interpret, Token *p_token_store, Token *p_token_op,$/;"	f
_product	./src/core/interpret.c	/^_product(Interpret *p_interpret) {$/;"	f
_product2	./src/core/interpret.c	/^_product2(Interpret *p_interpret) {$/;"	f
_program	./src/core/interpret.c	/^_program(Interpret *p_interpret) {$/;"	f
_scanner_get_next_char	./src/core/scanner.c	/^_scanner_get_next_char(Scanner *p_scanner) {$/;"	f
_scanner_has_next_char	./src/core/scanner.c	/^_scanner_has_next_char(Scanner *p_scanner) {$/;"	f
_scope_get_hash	./src/core/scope.c	/^_scope_get_hash(Scope *p_scope, char *c_key) {$/;"	f	file:
_scope_print_cb	./src/core/scope.c	/^_scope_print_cb(void *p_void, int i_level) {$/;"	f
_statement	./src/core/interpret.c	/^_statement(Interpret *p_interpret) {$/;"	f
_sum	./src/core/interpret.c	/^_sum(Interpret *p_interpret) {$/;"	f
_term	./src/core/interpret.c	/^_term(Interpret *p_interpret) {$/;"	f
_tree_print	./src/data/tree.c	/^_tree_print(TreeNode *p_treenode, int i_indent) {$/;"	f
_tree_print_cb	./src/data/tree.c	/^_tree_print_cb(void *p_void, void *p_indent) {$/;"	f
_tree_print_cb2	./src/data/tree.c	/^_tree_print_cb2(void *p_void, void *p_indent) {$/;"	f
_unshift_cb	./src/data/array.c	/^_unshift_cb(void *p_array, void *p_void) {$/;"	f
_var_assign	./src/core/interpret.c	/^_var_assign(Interpret *p_interpret) {$/;"	f
_var_decl	./src/core/interpret.c	/^_var_decl(Interpret *p_interpret) {$/;"	f
_var_list	./src/core/interpret.c	/^_var_list(Interpret *p_interpret) {$/;"	f
argv_addopt	./src/argv.c	/^argv_addopt(char c_opt, Tupel *p_tupel_argv) {$/;"	f
argv_check_argc	./src/argv.c	/^argv_check_argc(int i_required, unsigned i_argc_left, Tupel *p_tupel_argv) {$/;"	f
argv_checkopt	./src/argv.c	/^argv_checkopt(char c_opt, Tupel *p_tupel_argv) {$/;"	f
argv_checkopts	./src/argv.c	/^argv_checkopts(char *c_opts, Tupel *p_tupel_argv) {$/;"	f
argv_help	./src/argv.c	/^argv_help() {$/;"	f
argv_run	./src/argv.c	/^argv_run(Fype *p_fype, int i_argc, char **pc_argv) {$/;"	f
argv_switch	./src/argv.c	/^argv_switch(char c_arg, Tupel *p_tupel_argv, unsigned i_argc_left) {$/;"	f
argv_synopsis	./src/argv.c	/^argv_synopsis(Tupel *p_tupel_argv) {$/;"	f
argv_tupel_delete	./src/argv.c	/^argv_tupel_delete(Tupel *p_tupel_argv) {$/;"	f
array_append	./src/data/array.c	/^array_append(Array *p_array, Array *p_array_append) {$/;"	f
array_defined	./src/data/array.c	/^array_defined(Array *p_array, int i_index) {$/;"	f
array_delete	./src/data/array.c	/^array_delete(Array *p_array) {$/;"	f
array_delete_iterate	./src/data/array.c	/^array_delete_iterate(Array *p_array, void (*func)(void *)) {$/;"	f
array_get	./src/data/array.c	/^array_get(Array *p_array, int i_index) {$/;"	f
array_insert	./src/data/array.c	/^array_insert(Array *p_array, int i_index, void *p_val) {$/;"	f
array_iterate	./src/data/array.c	/^array_iterate(Array *p_array, void (*func)(void *)) {$/;"	f
array_iterate2	./src/data/array.c	/^array_iterate2(Array *p_array, void (*func)(void *, void *), void *p_void) {$/;"	f
array_new	./src/data/array.c	/^array_new() {$/;"	f
array_new_copy	./src/data/array.c	/^array_new_copy(Array *p_array) {$/;"	f
array_new_size	./src/data/array.c	/^array_new_size(int i_size) {$/;"	f
array_print_int	./src/data/array.c	/^array_print_int(Array *p_array) {$/;"	f
array_push	./src/data/array.c	/^array_push(Array *p_array, void *p_void) {$/;"	f
array_remove	./src/data/array.c	/^array_remove(Array *p_array, int i_index) {$/;"	f
array_resize	./src/data/array.c	/^array_resize(Array *p_array, int i_size) {$/;"	f
array_set	./src/data/array.c	/^array_set(Array *p_array, int i_index, void *p_val) {$/;"	f
array_set_used	./src/data/array.c	/^array_set_used(Array *p_array, int i_used) {$/;"	f
array_splice	./src/data/array.c	/^array_splice(Array *p_array, int i_index, Array *p_array2) {$/;"	f
array_unshift	./src/data/array.c	/^array_unshift(Array *p_array, void *p_void) {$/;"	f
arrayelement_delete	./src/data/array.c	/^arrayelement_delete(ArrayElement *p_ae) {$/;"	f
arrayelement_new	./src/data/array.c	/^arrayelement_new(void *p_val) {$/;"	f
arrayiterator_delete	./src/data/array.c	/^arrayiterator_delete(ArrayIterator *p_arrayiterator) {$/;"	f
arrayiterator_has_next	./src/data/array.c	/^arrayiterator_has_next(ArrayIterator *p_arrayiterator) {$/;"	f
arrayiterator_new	./src/data/array.c	/^arrayiterator_new(Array *p_array) {$/;"	f
arrayiterator_next	./src/data/array.c	/^arrayiterator_next(ArrayIterator *p_arrayiterator) {$/;"	f
convert_function_arg_types_to_highest	./src/core/convert.c	/^convert_function_arg_types_to_highest(Stack *p_stack_args, int i_args) {$/;"	f
convert_to_array	./src/core/convert.c	/^convert_to_array(Token *p_token) {$/;"	f
convert_to_double	./src/core/convert.c	/^convert_to_double(Token *p_token) {$/;"	f
convert_to_highest	./src/core/convert.c	/^convert_to_highest(Token *p_token1, Token *p_token2) {$/;"	f
convert_to_integer	./src/core/convert.c	/^convert_to_integer(Token *p_token) {$/;"	f
convert_to_integer_get	./src/core/convert.c	/^convert_to_integer_get(Token *p_token) {$/;"	f
convert_to_string	./src/core/convert.c	/^convert_to_string(Token *p_token) {$/;"	f
convert_to_tt	./src/core/convert.c	/^convert_to_tt(Token *p_token, TokenType tt) {$/;"	f
dat_clear	./src/data/dat.c	/^dat_clear(Dat *p_dat) {$/;"	f
dat_delete	./src/data/dat.c	/^dat_delete(Dat *p_dat) {$/;"	f
dat_empty	./src/data/dat.c	/^dat_empty(Dat *p_dat) {$/;"	f
dat_first	./src/data/dat.c	/^dat_first(Dat *p_dat) {$/;"	f
dat_first_t	./src/data/dat.c	/^dat_first_t(Dat *p_dat, TYPE *p_type) {$/;"	f
dat_iterate	./src/data/dat.c	/^dat_iterate(Dat *p_dat, void (*func)(void *)) {$/;"	f
dat_iterate_t	./src/data/dat.c	/^dat_iterate_t(Dat *p_dat, void (*func)(void *, TYPE)) {$/;"	f
dat_iterate_tl	./src/data/dat.c	/^dat_iterate_tl(Dat *p_dat, void (*func)(void *, TYPE, _Bool)) {$/;"	f
dat_last	./src/data/dat.c	/^dat_last(Dat *p_dat) {$/;"	f
dat_last_t	./src/data/dat.c	/^dat_last_t(Dat *p_dat, TYPE *p_type) {$/;"	f
dat_new	./src/data/dat.c	/^dat_new() {$/;"	f
dat_pop	./src/data/dat.c	/^dat_pop(Dat *p_dat) {$/;"	f
dat_pop_t	./src/data/dat.c	/^dat_pop_t(Dat *p_dat, TYPE *p_type) {$/;"	f
dat_push	./src/data/dat.c	/^dat_push(Dat *p_dat, void *p_val) {$/;"	f
dat_push_t	./src/data/dat.c	/^dat_push_t(Dat *p_dat, void *p_val, TYPE type) {$/;"	f
dat_second	./src/data/dat.c	/^dat_second(Dat *p_dat) {$/;"	f
dat_second_t	./src/data/dat.c	/^dat_second_t(Dat *p_dat, TYPE *p_type) {$/;"	f
dat_size	./src/data/dat.c	/^dat_size(Dat *p_dat) {$/;"	f
datelem_new	./src/data/dat.c	/^datelem_new() {$/;"	f
datelem_new_t	./src/data/dat.c	/^datelem_new_t(TYPE type) {$/;"	f
datiter_dat	./src/data/dat.c	/^datiter_dat(DatIter *p_iter) {$/;"	f
datiter_delete	./src/data/dat.c	/^datiter_delete(DatIter *p_iter) {$/;"	f
datiter_left	./src/data/dat.c	/^datiter_left(DatIter *p_iter) {$/;"	f
datiter_new	./src/data/dat.c	/^datiter_new(Dat *p_dat) {$/;"	f
datiter_next	./src/data/dat.c	/^datiter_next(DatIter *p_iter) {$/;"	f
datiter_next_t	./src/data/dat.c	/^datiter_next_t(DatIter *p_iter, TYPE *p_type) {$/;"	f
datiter_skip	./src/data/dat.c	/^datiter_skip(DatIter *p_iter, unsigned i_num) {$/;"	f
function_delete	./src/core/function.c	/^function_delete(Function *p_function) {$/;"	f
function_is_buildin	./src/core/functions.c	/^function_is_buildin(Token *p_token_ident) {$/;"	f
function_is_self_defined	./src/core/functions.c	/^function_is_self_defined(Interpret *p_interpret) {$/;"	f
function_new	./src/core/function.c	/^function_new() {$/;"	f
function_process	./src/core/functions.c	/^function_process(Interpret *p_interpret, Token *p_token_op,$/;"	f
function_process_buildin	./src/core/functions.c	/^function_process_buildin(Interpret *p_interpret, Token *p_token_ident,$/;"	f
function_process_self_defined	./src/core/functions.c	/^function_process_self_defined(Interpret *p_interpret, Token *p_token_ident) {$/;"	f
functions_delete	./src/core/functions.c	/^functions_delete(Functions *p_functions) {$/;"	f
functions_init	./src/core/functions.c	/^functions_init(Functions *p_functions) {$/;"	f
functions_new	./src/core/functions.c	/^functions_new() {$/;"	f
fype_delete	./src/fype.c	/^fype_delete(Fype *p_fype) {$/;"	f
fype_new	./src/fype.c	/^fype_new() {$/;"	f
fype_run	./src/fype.c	/^fype_run(int i_argc, char **pc_argv) {$/;"	f
garbage_add	./src/core/garbage.c	/^garbage_add(void *p, GarbageType type) {$/;"	f
garbage_add2	./src/core/garbage.c	/^garbage_add2(void *p,$/;"	f
garbage_add3	./src/core/garbage.c	/^garbage_add3(void *p,$/;"	f
garbage_add_token	./src/core/garbage.c	/^garbage_add_token(Token *p_token) {$/;"	f
garbage_collect	./src/core/garbage.c	/^garbage_collect() {$/;"	f
garbage_destroy	./src/core/garbage.c	/^garbage_destroy() {$/;"	f
garbage_init	./src/core/garbage.c	/^garbage_init() {$/;"	f
get_tt	./src/core/token.c	/^get_tt(char *c_token) {$/;"	f
hash_addrisfree	./src/data/hash.c	/^hash_addrisfree(Hash *p_hash, int i_addr) {$/;"	f
hash_addrisocc	./src/data/hash.c	/^hash_addrisocc(Hash *p_hash, int i_addr, char *c_key) {$/;"	f
hash_delete	./src/data/hash.c	/^hash_delete(Hash *p_hash) {$/;"	f
hash_get	./src/data/hash.c	/^hash_get(Hash *p_hash, char *c_key) {$/;"	f
hash_get_ht	./src/data/hash.c	/^hash_get_ht(Hash *p_hash, char *c_key, TYPE *p_type) {$/;"	f
hash_get_ht_addr	./src/data/hash.c	/^hash_get_ht_addr(Hash *p_hash, char *c_key, TYPE *p_type, int *p_addr) {$/;"	f
hash_getaddr	./src/data/hash.c	/^hash_getaddr(Hash *p_hash, char *c_key, HASH_OP OP) {$/;"	f
hash_insert	./src/data/hash.c	/^hash_insert(Hash *p_hash, char *c_key, void *p_val) {$/;"	f
hash_insert_ht	./src/data/hash.c	/^hash_insert_ht(Hash *p_hash, char *c_key, void *p_val, TYPE type) {$/;"	f
hash_iterate	./src/data/hash.c	/^hash_iterate(Hash *p_hash, void (*func)(void *)) {$/;"	f
hash_iterate_key	./src/data/hash.c	/^hash_iterate_key(Hash *p_hash, void (*func)(void *, char *)) {$/;"	f
hash_new	./src/data/hash.c	/^hash_new(unsigned i_size) {$/;"	f
hash_nextaddr	./src/data/hash.c	/^hash_nextaddr(Hash *p_hash, int i_max_tries, char *c_key, int i_addr,$/;"	f
hash_print	./src/data/hash.c	/^hash_print(Hash *p_hash) {$/;"	f
hash_print_addrval	./src/data/hash.c	/^hash_print_addrval(Hash *p_hash, int i_addr) {$/;"	f
hash_remove	./src/data/hash.c	/^hash_remove(Hash *p_hash, char *c_key) {$/;"	f
hash_size	./src/data/hash.c	/^hash_size(Hash *p_hash, int i_size) {$/;"	f
interpret_delete	./src/core/interpret.c	/^interpret_delete(Interpret *p_interpret) {$/;"	f
interpret_new	./src/core/interpret.c	/^interpret_new(List *p_list_token, Hash *p_hash_syms) {$/;"	f
interpret_process	./src/core/interpret.c	/^interpret_process(Interpret *p_interpret) {$/;"	f
interpret_run	./src/core/interpret.c	/^interpret_run(Fype *p_fype) {$/;"	f
interpret_subprocess	./src/core/interpret.c	/^interpret_subprocess(Interpret *p_interpret, List *p_list_token) {$/;"	f
list_add_back	./src/data/list.c	/^list_add_back(List *p_list, void *p_val) {$/;"	f
list_add_front	./src/data/list.c	/^list_add_front(List *p_list, void *p_val) {$/;"	f
list_clear	./src/data/list.c	/^list_clear(List *p_list) {$/;"	f
list_clear_and_free_vals	./src/data/list.c	/^list_clear_and_free_vals(List *p_list) {$/;"	f
list_concat_back	./src/data/list.c	/^list_concat_back(List *p_list1, List *p_list2) {$/;"	f
list_concat_front	./src/data/list.c	/^list_concat_front(List *p_list1, List *p_list2) {$/;"	f
list_copy	./src/data/list.c	/^list_copy(List *p_list) {$/;"	f
list_copy2	./src/data/list.c	/^list_copy2(List *p_list, void* (*func)(void *)) {$/;"	f
list_delete	./src/data/list.c	/^list_delete(List *p_list) {$/;"	f
list_delete_and_free_vals	./src/data/list.c	/^list_delete_and_free_vals(List *p_list) {$/;"	f
list_delete_cb	./src/data/list.c	/^list_delete_cb(void *p_list) {$/;"	f
list_empty	./src/data/list.c	/^list_empty(List *p_list) {$/;"	f
list_iterate	./src/data/list.c	/^list_iterate(List *p_list, void (*func)(void *)) {$/;"	f
list_iterate2	./src/data/list.c	/^list_iterate2(List *p_list, void (*func)(void *, void *), void *p_void) {$/;"	f
list_iterate2_ptr	./src/data/list.c	/^list_iterate2_ptr(List *p_list, void (*func)(void *, void *), void *p_void) {$/;"	f
list_iterate3	./src/data/list.c	/^list_iterate3(List *p_list,$/;"	f
list_iterate3_ptr	./src/data/list.c	/^list_iterate3_ptr(List *p_list,$/;"	f
list_new	./src/data/list.c	/^list_new() {$/;"	f
list_remove_back	./src/data/list.c	/^list_remove_back(List *p_list) {$/;"	f
list_remove_elem	./src/data/list.c	/^list_remove_elem(List *p_list, ListElem *p_elem_remove) {$/;"	f
list_remove_front	./src/data/list.c	/^list_remove_front(List *p_list) {$/;"	f
list_size	./src/data/list.c	/^list_size(List *p_list) {$/;"	f
listelem_new	./src/data/list.c	/^listelem_new() {$/;"	f
listiterator_current	./src/data/list.c	/^listiterator_current(ListIterator *p_iter) {$/;"	f
listiterator_delete	./src/data/list.c	/^listiterator_delete(ListIterator *p_iter) {$/;"	f
listiterator_end	./src/data/list.c	/^listiterator_end(ListIterator *p_iter) {$/;"	f
listiterator_get_state	./src/data/list.c	/^listiterator_get_state(ListIterator *p_iter) {$/;"	f
listiterator_has_next	./src/data/list.c	/^listiterator_has_next(ListIterator *p_iter) {$/;"	f
listiterator_new	./src/data/list.c	/^listiterator_new(List *p_list) {$/;"	f
listiterator_new_reverse	./src/data/list.c	/^listiterator_new_reverse(List *p_list) {$/;"	f
listiterator_next	./src/data/list.c	/^listiterator_next(ListIterator *p_iter) {$/;"	f
listiterator_next_elem	./src/data/list.c	/^listiterator_next_elem(ListIterator *p_iter) {$/;"	f
listiterator_prev	./src/data/list.c	/^listiterator_prev(ListIterator *p_iter) {$/;"	f
listiterator_set_state	./src/data/list.c	/^listiterator_set_state(ListIterator *p_iter, ListIteratorState *p_state) {$/;"	f
listiteratorstate_delete	./src/data/list.c	/^listiteratorstate_delete(ListIteratorState *p_state) {$/;"	f
main	./src/main.c	/^main(int i_argc, char **pc_argv) {$/;"	f
map_clear	./src/data/map.c	/^map_clear(Map *p_map) {$/;"	f
map_clear_and_free_vals	./src/data/map.c	/^map_clear_and_free_vals(Map *p_map) {$/;"	f
map_delete	./src/data/map.c	/^map_delete(Map *p_map) {$/;"	f
map_delete_and_free_vals	./src/data/map.c	/^map_delete_and_free_vals(Map *p_map) {$/;"	f
map_empty	./src/data/map.c	/^map_empty(Map *p_map) {$/;"	f
map_exists	./src/data/map.c	/^map_exists(Map *p_map, char *c_key) {$/;"	f
map_exists2	./src/data/map.c	/^map_exists2(Map *p_map, char *c_key1, char *c_key2) {$/;"	f
map_full	./src/data/map.c	/^map_full(Map *p_map) {$/;"	f
map_get	./src/data/map.c	/^map_get(Map *p_map, char *c_key) {$/;"	f
map_get2	./src/data/map.c	/^map_get2(Map *p_map, char *c_key1, char *c_key2) {$/;"	f
map_get_addr	./src/data/map.c	/^map_get_addr(Map *p_map, char *c_key) {$/;"	f
map_get_key	./src/data/map.c	/^map_get_key(Map *p_map, void *p_val) {$/;"	f
map_insert	./src/data/map.c	/^map_insert(Map *p_map, char *c_key, void *p_val) {$/;"	f
map_insert2	./src/data/map.c	/^map_insert2(Map *p_map, char *c_key1, char *c_key2, void *p_val) {$/;"	f
map_insert_if_not_exists	./src/data/map.c	/^map_insert_if_not_exists(Map *p_map, char *c_key, void *p_val) {$/;"	f
map_iterate	./src/data/map.c	/^map_iterate(Map *p_map, void (*func) (void *)) {$/;"	f
map_iterate2	./src/data/map.c	/^map_iterate2(Map *p_map, void (*func) (void *, void *), void *p_void) {$/;"	f
map_iterate2_keys	./src/data/map.c	/^map_iterate2_keys(Map *p_map,$/;"	f
map_iterate3	./src/data/map.c	/^map_iterate3(Map *p_map,$/;"	f
map_iterate3_keys	./src/data/map.c	/^map_iterate3_keys(Map *p_map,$/;"	f
map_iterate_keys	./src/data/map.c	/^map_iterate_keys(Map *p_map, void (*func) (void *, char *)) {$/;"	f
map_new	./src/data/map.c	/^map_new(int i_max_size) {$/;"	f
map_new_named	./src/data/map.c	/^map_new_named(int i_max_size, char *c_name) {$/;"	f
map_next_free_addr	./src/data/map.c	/^map_next_free_addr(Map *p_map) {$/;"	f
map_print	./src/data/map.c	/^map_print(Map *p_map) {$/;"	f
map_remove	./src/data/map.c	/^map_remove(Map *p_map, char *c_key) {$/;"	f
p_2free	./src/core/garbage.c	/^   void *p_2free;$/;"	m	struct:__anon1	file:
p_func	./src/core/garbage.c	/^   void (*p_func)(void*);$/;"	m	struct:__anon1	file:
p_print	./src/core/garbage.c	/^   void (*p_print)(void*);$/;"	m	struct:__anon1	file:
p_ref_count	./src/core/garbage.c	/^   int *p_ref_count;$/;"	m	struct:__anon1	file:
queue_clear	./src/data/queue.c	/^queue_clear(Queue *p_queue) {$/;"	f
queue_delete	./src/data/queue.c	/^queue_delete(Queue *p_queue) {$/;"	f
queue_empty	./src/data/queue.c	/^queue_empty(Queue *p_queue) {$/;"	f
queue_iterate	./src/data/queue.c	/^queue_iterate(Queue *p_queue, void (*func)(void *)) {$/;"	f
queue_iterate_t	./src/data/queue.c	/^queue_iterate_t(Queue *p_queue, void (*func)(void *, TYPE)) {$/;"	f
queue_iterate_tl	./src/data/queue.c	/^queue_iterate_tl(Queue *p_queue, void (*func)(void *, TYPE, _Bool)) {$/;"	f
queue_new	./src/data/queue.c	/^queue_new() {$/;"	f
queue_pop	./src/data/queue.c	/^queue_pop(Queue *p_queue) {$/;"	f
queue_pop_t	./src/data/queue.c	/^queue_pop_t(Queue *p_queue, TYPE *p_type) {$/;"	f
queue_push	./src/data/queue.c	/^queue_push(Queue *p_queue, void *p_val) {$/;"	f
queue_push_t	./src/data/queue.c	/^queue_push_t(Queue *p_queue, void *p_val, TYPE type) {$/;"	f
queue_size	./src/data/queue.c	/^queue_size(Queue *p_queue) {$/;"	f
queueelem_new	./src/data/queue.c	/^queueelem_new() {$/;"	f
queueelem_new_t	./src/data/queue.c	/^queueelem_new_t(TYPE type) {$/;"	f
queueiter_delete	./src/data/queue.c	/^queueiter_delete(QueueIter *p_iter) {$/;"	f
queueiter_left	./src/data/queue.c	/^queueiter_left(QueueIter *p_iter) {$/;"	f
queueiter_new	./src/data/queue.c	/^queueiter_new(Queue *p_queue) {$/;"	f
queueiter_next	./src/data/queue.c	/^queueiter_next(QueueIter *p_iter) {$/;"	f
queueiter_next_t	./src/data/queue.c	/^queueiter_next_t(QueueIter *p_iter, TYPE *p_type) {$/;"	f
queueiter_queue	./src/data/queue.c	/^queueiter_queue(QueueIter *p_iter) {$/;"	f
reference_delete	./src/core/reference.c	/^reference_delete(Reference *p_reference) {$/;"	f
reference_delete_cb	./src/core/reference.c	/^reference_delete_cb(void *p_void) {$/;"	f
reference_new	./src/core/reference.c	/^reference_new(Symbol *p_symbol) {$/;"	f
scanner_add_token	./src/core/scanner.c	/^scanner_add_token(Scanner *p_scanner, char **cc_token, int *p_token_len,$/;"	f
scanner_cleanup_list_token_cb	./src/core/scanner.c	/^scanner_cleanup_list_token_cb(void *p_void) {$/;"	f
scanner_delete	./src/core/scanner.c	/^scanner_delete(Scanner *p_scanner) {$/;"	f
scanner_get_tt_cur	./src/core/scanner.c	/^scanner_get_tt_cur(char *c_token) {$/;"	f
scanner_new	./src/core/scanner.c	/^scanner_new(List *p_list_token, Tupel *p_tupel_argv) {$/;"	f
scanner_post_task	./src/core/scanner.c	/^scanner_post_task(Scanner *p_scanner) {$/;"	f
scanner_run	./src/core/scanner.c	/^scanner_run(Fype *p_fype) {$/;"	f
scope_delete	./src/core/scope.c	/^scope_delete(Scope *p_scope) {$/;"	f
scope_down	./src/core/scope.c	/^scope_down(Scope *p_scope) {$/;"	f
scope_exists	./src/core/scope.c	/^scope_exists(Scope *p_scope, char *c_key) {$/;"	f
scope_get	./src/core/scope.c	/^scope_get(Scope *p_scope, char *c_key) {$/;"	f
scope_new	./src/core/scope.c	/^scope_new(Hash *p_hash_syms) {$/;"	f
scope_newset	./src/core/scope.c	/^scope_newset(Scope *p_scope, char *c_key, Symbol *p_symbol) {$/;"	f
scope_print	./src/core/scope.c	/^scope_print(Scope *p_scope) {$/;"	f
scope_remove	./src/core/scope.c	/^scope_remove(Scope *p_scope, char *c_key) {$/;"	f
scope_reset	./src/core/scope.c	/^scope_reset(Scope *p_scope, char *c_key, Symbol *p_symbol) {$/;"	f
scope_up	./src/core/scope.c	/^scope_up(Scope *p_scope) {$/;"	f
stack_clear	./src/data/stack.c	/^stack_clear(Stack *p_stack) {$/;"	f
stack_concat	./src/data/stack.c	/^stack_concat(Stack *p_stack, Stack *p_stack_concat) {$/;"	f
stack_delete	./src/data/stack.c	/^stack_delete(Stack *p_stack) {$/;"	f
stack_delete_and_free	./src/data/stack.c	/^stack_delete_and_free(Stack *p_stack) {$/;"	f
stack_empty	./src/data/stack.c	/^stack_empty(Stack *p_stack) {$/;"	f
stack_iterate	./src/data/stack.c	/^stack_iterate(Stack *p_stack, void (*func)(void *p_void)) {$/;"	f
stack_iterate2	./src/data/stack.c	/^stack_iterate2(Stack *p_stack, void (*func)(void *p_void, void *p_void2),$/;"	f
stack_iterate_level	./src/data/stack.c	/^stack_iterate_level(Stack *p_stack, void (*func)(void *p_void,$/;"	f
stack_merge	./src/data/stack.c	/^stack_merge(Stack *p_stack, Stack *p_stack_merge) {$/;"	f
stack_new	./src/data/stack.c	/^stack_new() {$/;"	f
stack_pop	./src/data/stack.c	/^stack_pop(Stack *p_stack) {$/;"	f
stack_push	./src/data/stack.c	/^stack_push(Stack *p_stack, void *p_val) {$/;"	f
stack_size	./src/data/stack.c	/^stack_size(Stack *p_stack) {$/;"	f
stack_top	./src/data/stack.c	/^stack_top(Stack *p_stack) {$/;"	f
stackelem_new	./src/data/stack.c	/^stackelem_new() {$/;"	f
stackiterator_delete	./src/data/stack.c	/^stackiterator_delete(StackIterator *p_iter) {$/;"	f
stackiterator_has_next	./src/data/stack.c	/^stackiterator_has_next(StackIterator *p_iter) {$/;"	f
stackiterator_new	./src/data/stack.c	/^stackiterator_new(Stack *p_stack) {$/;"	f
stackiterator_next	./src/data/stack.c	/^stackiterator_next(StackIterator *p_iter) {$/;"	f
stackiterator_remove_prev	./src/data/stack.c	/^stackiterator_remove_prev(StackIterator *p_iter) {$/;"	f
sym_get_name	./src/core/symbol.c	/^sym_get_name(SymbolType sym) {$/;"	f
symbol_cleanup_hash_syms_cb	./src/core/symbol.c	/^symbol_cleanup_hash_syms_cb(void *p_void) {$/;"	f
symbol_delete	./src/core/symbol.c	/^symbol_delete(Symbol *p_symbol) {$/;"	f
symbol_new	./src/core/symbol.c	/^symbol_new(SymbolType sym, void *p_val) {$/;"	f
symbol_print	./src/core/symbol.c	/^symbol_print(Symbol *p_symbol, char *c_key) {$/;"	f
symbol_print_cb	./src/core/symbol.c	/^symbol_print_cb(void *p_void, char *c_key) {$/;"	f
token_copy_cb	./src/core/token.c	/^token_copy_cb(void *p_void) {$/;"	f
token_copy_vals	./src/core/token.c	/^void token_copy_vals(Token *p_token_to, Token *p_token_from) {$/;"	f
token_delete	./src/core/token.c	/^token_delete(Token *p_token) {$/;"	f
token_delete_cb	./src/core/token.c	/^token_delete_cb(void *p_void) {$/;"	f
token_new	./src/core/token.c	/^token_new(char *c_val, TokenType tt_cur, int i_line_nr,$/;"	f
token_new_	./src/core/token.c	/^token_new_(char *c_val, TokenType tt_cur, char *c_filename) {$/;"	f
token_new_array	./src/core/token.c	/^token_new_array(int i_size) {$/;"	f
token_new_copy	./src/core/token.c	/^token_new_copy(Token *p_token) {$/;"	f
token_new_double	./src/core/token.c	/^token_new_double(double d_val) {$/;"	f
token_new_dummy	./src/core/token.c	/^token_new_dummy() {$/;"	f
token_new_integer	./src/core/token.c	/^token_new_integer(int i_val) {$/;"	f
token_new_string	./src/core/token.c	/^token_new_string(char *c_val) {$/;"	f
token_print	./src/core/token.c	/^token_print(Token *p_token) {$/;"	f
token_print_cb	./src/core/token.c	/^token_print_cb(void *p_void) {$/;"	f
token_print_val	./src/core/token.c	/^token_print_val(Token *p_token) {$/;"	f
token_ref_down_cb	./src/core/token.c	/^token_ref_down_cb(void *p_void) {$/;"	f
tree_delete	./src/data/tree.c	/^tree_delete(Tree *p_tree) {$/;"	f
tree_new	./src/data/tree.c	/^tree_new() {$/;"	f
tree_print	./src/data/tree.c	/^tree_print(Tree *p_tree) {$/;"	f
treeiterator_delete	./src/data/tree.c	/^treeiterator_delete(TreeIterator *p_iter) {$/;"	f
treeiterator_has_next	./src/data/tree.c	/^treeiterator_has_next(TreeIterator *p_iter) {$/;"	f
treeiterator_new	./src/data/tree.c	/^treeiterator_new(Tree *p_tree) {$/;"	f
treeiterator_next	./src/data/tree.c	/^treeiterator_next(TreeIterator *p_iter) {$/;"	f
treeiteratorstate_delete	./src/data/tree.c	/^treeiteratorstate_delete(TreeIteratorState *p_state) {$/;"	f
treeiteratorstate_new	./src/data/tree.c	/^treeiteratorstate_new(TreeNode *ptn) {$/;"	f
treenode_delete	./src/data/tree.c	/^treenode_delete(TreeNode *p_treenode) {$/;"	f
treenode_insert_left	./src/data/tree.c	/^treenode_insert_left(TreeNode *p_treenode, TreeNode *p_treenode2) {$/;"	f
treenode_insert_right	./src/data/tree.c	/^treenode_insert_right(TreeNode *p_treenode, TreeNode *p_treenode2) {$/;"	f
treenode_new	./src/data/tree.c	/^treenode_new(void *p_val) {$/;"	f
treenode_new2	./src/data/tree.c	/^treenode_new2(void *p_val, void *p_val2) {$/;"	f
tt_get_name	./src/core/token.c	/^tt_get_name(TokenType tt_cur) {$/;"	f
tupel_delete	./src/data/tupel.c	/^tupel_delete(Tupel *p_tupel) {$/;"	f
tupel_new	./src/data/tupel.c	/^tupel_new() {$/;"	f
type	./src/core/garbage.c	/^   GarbageType type;$/;"	m	struct:__anon1	file:
